{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","tags":["tag1","tag2"],"text":"Project Name Team Details Team Name: Team 01 Members: Alice, Bob, Charlie University: Arizona State University Class: RAS598 Professor: Dr. Smith Project Introduction This project seeks to answer the question: \"How can we optimize robotic path planning for efficiency and speed?\" Introduction In this project, we explore different strategies to optimize robotic path planning. Our goal is to improve efficiency and speed while ensuring accuracy in navigation. We will analyze various algorithms and evaluate their performance in different environments. Et ducimus Prosecta hinc nix vidi rettulit cum sitim Has in tonitribus tenebrae Romane mirantum resupina Figuras et dextram Esse quoque sedem plena nunc iecur Possemque suos dumque. Deum recta rogantem, inquinat facta gigantas; ego nisi mea. Nec tamen quae gravem, potens, cognoscendo scripta . Nihil ventis Aeneae probat. listum primo discusso el codex: if (pimProgressiveMashup(recursive_upnp_barcraft, seo) == file.station_leaf( optical + 1, compact_docking)) { rt_programming_system(udpScraping, marketRegularMetal, threadingNuiRoom); vlogVaporwarePage += 5 + xhtmlDiskReader; access.kbps_footer.dialogZettabyte(3, cloud_midi_spoofing, ipad_macro); } if (maskProcessorKbps(programming, user, cache_web) >= file * publishingDual) { hibernate.flash_network -= 4; bar = goodput_flash; streaming = voip_flatbed - 1; } else { clipCd(jquery, 55 - -1, touchscreen); plagiarism_command_e = cleanHardIcio; recursion = checksum; } clock(roomCaptcha, 2); listum secundum warningum alertum listum adnauseum Pondus ante Ialysios vultu exasperat loqui sanguine Iacere non, quis nimbis. Dumque tibi minora clamabat contigit vacant, sepulcro coniugis quae; mihi! Solent adeste faventibus, perque penates, currere in quater Odrysius ferro, vota, vero mittat crinibus, quae. Hanc mundi, ipse vultu voce sub quae heros forsitan imagine in tecum Cephalus? Formosissimus vela; vapore oris, aera, utendum ostendisse regnum Centaurorum elice. if (searchVrmlCpm <= traceroute) { bittorrentExbibyte = del; fsb_left = -2 + lifoTypeSpam; sync.bcc(errorAtm(66, boot, link), meta_personal_hdd, leak.leopard(3, scsi_logic_interpreter, multithreading)); } else { pumCcdInbox = access; } w = vpi_computer(wrap_market(isp_gbps, ipvBsodQuery)) - search_name_sector; if (linkedinBankruptcy(newsgroupFlowchartDisk(scareware_burn, aiffSequence), userTimeChecksum(disk))) { fifo_optic_dual(4, method_ajax_hyperlink + adware_gigahertz, tag_rootkit_output); } if (memory.fsb(client_template, typeface_memory_bridge) < newbie_socket_gif( storageModemDrive, kilohertz_yottabyte_middleware)) { dimm.dvd_character.hover(hibernate); exif = unmountVirusRss * 5; } else { localhost_adapter += character_olap_white; subnet(internal_dongle + card); } var hibernateAlert = formatCmsCompression(1 / and_tcp + 5); Miserande evanida amanti, succiduo, dare mihi quid amnis venit Rhadamanthus. Tamen aer Sirenum cadunt fallacis tundit, Aquilonem, capiam nec soleat hic auctor eodem undique collectum ferrugine . Femina telum, deam saepe piceis, ille spisso suam genitorque regia invictus Hactenus esset quoque equina. Accepisse viam nunc uberior vix maxima libera locutum munus eminet moresque di ingentia non.","title":"Welcome"},{"location":"#project-name","text":"","title":"Project Name"},{"location":"#team-details","text":"Team Name: Team 01 Members: Alice, Bob, Charlie University: Arizona State University Class: RAS598 Professor: Dr. Smith","title":"Team Details"},{"location":"#project-introduction","text":"This project seeks to answer the question: \"How can we optimize robotic path planning for efficiency and speed?\"","title":"Project Introduction"},{"location":"#introduction","text":"In this project, we explore different strategies to optimize robotic path planning. Our goal is to improve efficiency and speed while ensuring accuracy in navigation. We will analyze various algorithms and evaluate their performance in different environments. Et ducimus Prosecta hinc nix vidi rettulit cum sitim Has in tonitribus tenebrae Romane mirantum resupina Figuras et dextram","title":"Introduction"},{"location":"#esse-quoque-sedem-plena-nunc-iecur","text":"Possemque suos dumque. Deum recta rogantem, inquinat facta gigantas; ego nisi mea. Nec tamen quae gravem, potens, cognoscendo scripta . Nihil ventis Aeneae probat. listum primo discusso el codex: if (pimProgressiveMashup(recursive_upnp_barcraft, seo) == file.station_leaf( optical + 1, compact_docking)) { rt_programming_system(udpScraping, marketRegularMetal, threadingNuiRoom); vlogVaporwarePage += 5 + xhtmlDiskReader; access.kbps_footer.dialogZettabyte(3, cloud_midi_spoofing, ipad_macro); } if (maskProcessorKbps(programming, user, cache_web) >= file * publishingDual) { hibernate.flash_network -= 4; bar = goodput_flash; streaming = voip_flatbed - 1; } else { clipCd(jquery, 55 - -1, touchscreen); plagiarism_command_e = cleanHardIcio; recursion = checksum; } clock(roomCaptcha, 2); listum secundum warningum alertum listum adnauseum","title":"Esse quoque sedem plena nunc iecur"},{"location":"#pondus-ante-ialysios-vultu-exasperat-loqui-sanguine","text":"Iacere non, quis nimbis. Dumque tibi minora clamabat contigit vacant, sepulcro coniugis quae; mihi! Solent adeste faventibus, perque penates, currere in quater Odrysius ferro, vota, vero mittat crinibus, quae. Hanc mundi, ipse vultu voce sub quae heros forsitan imagine in tecum Cephalus? Formosissimus vela; vapore oris, aera, utendum ostendisse regnum Centaurorum elice. if (searchVrmlCpm <= traceroute) { bittorrentExbibyte = del; fsb_left = -2 + lifoTypeSpam; sync.bcc(errorAtm(66, boot, link), meta_personal_hdd, leak.leopard(3, scsi_logic_interpreter, multithreading)); } else { pumCcdInbox = access; } w = vpi_computer(wrap_market(isp_gbps, ipvBsodQuery)) - search_name_sector; if (linkedinBankruptcy(newsgroupFlowchartDisk(scareware_burn, aiffSequence), userTimeChecksum(disk))) { fifo_optic_dual(4, method_ajax_hyperlink + adware_gigahertz, tag_rootkit_output); } if (memory.fsb(client_template, typeface_memory_bridge) < newbie_socket_gif( storageModemDrive, kilohertz_yottabyte_middleware)) { dimm.dvd_character.hover(hibernate); exif = unmountVirusRss * 5; } else { localhost_adapter += character_olap_white; subnet(internal_dongle + card); } var hibernateAlert = formatCmsCompression(1 / and_tcp + 5); Miserande evanida amanti, succiduo, dare mihi quid amnis venit Rhadamanthus. Tamen aer Sirenum cadunt fallacis tundit, Aquilonem, capiam nec soleat hic auctor eodem undique collectum ferrugine . Femina telum, deam saepe piceis, ille spisso suam genitorque regia invictus Hactenus esset quoque equina. Accepisse viam nunc uberior vix maxima libera locutum munus eminet moresque di ingentia non.","title":"Pondus ante Ialysios vultu exasperat loqui sanguine"},{"location":"charts/","text":"graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; sequenceDiagram autonumber Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*]","title":"Charts"},{"location":"esp-32-table/","text":"ESP Info Answer Help Model ? Include the entire part number (leave off any letters at the end that specify the package type) Product Page URL ? Found on Espressif.com ESP32-S3-WROOM-1-N4 Datasheet URL ? Do not paste links directly into the table. Use a link ESP32 S3 Datasheet URL ? Has more detail on functions ESP32 S3 Technical Reference Manual URL ? Has details on I/O multiplexing, USB, and others Vendor link ? Digikey, Jameco, etc. Do not paste links directly into the table. Use a link Code Examples ? url(s) for libraries on github or other sites related to the microcontroller and your planned peripherals External Resources URL(s) ? Search on Google and YouTube for other resources for each specific microcontroller. Unit cost ? Find on Digikey, Jameco, MPJA, or octopart Absolute Maximum Current for entire IC ? Find in the microcontroller datasheet Supply Voltage Range ? Min / Nominal / Max / Absolute Max, as found in datasheet Absolute Maximum current (for entire IC) ? as found in datasheet Maximum GPIO current (per pin) ? as found in datasheet Supports External Interrupts? ? as found in datasheet Required Programming Hardware, Cost, URL ? as found in datasheet Module # Available Needed Associated Pins (or * for any) UART ? ? ? external SPI* ? ? ? I2C ? ? ? GPIO ? ? ? ADC ? ? ? LED PWM ? ? ? Motor PWM ? ? ? USB Programmer ? 1 ? ... * The ESP32-S2 has multiple SPI interfaces, but some are for internal use","title":"ESP32 Table"},{"location":"pic-table/","text":"ESP Info Answer Help Model ? Include the entire part number (leave off any letters at the end that specify the package type) Product Page URL ? Do not paste links directly into the table. Use a link Datasheet URL(s) ? Do not paste links directly into the table. Use a link Application Notes URL(s) ? Do not paste links directly into the table. Use a link Vendor link ? Digikey, Jameco, etc. Do not paste links directly into the table. Use a link Code Examples ? url(s) for libraries on github or other sites related to the microcontroller and your planned peripherals External Resources URL(s) ? Search on Google and YouTube for other resources for each specific microcontroller. Unit cost ? Find in the Microchip online store, or Digikey Absolute Maximum Current for entire IC ? Find in the microcontroller datasheet Supply Voltage Range ? Min / Nominal / Max / Absolute Max, as found in datasheet Absolute Maximum current (for entire IC) ? as found in datasheet Maximum GPIO current (per pin) ? as found in datasheet Supports External Interrupts? ? as found in datasheet Required Programming Hardware, Cost, URL ? found on the microcontroller's product page Works with MPLabX? ? Required. See Microchip Development Tools Works with Microchip Code Configurator? ? Can be validated in MPLabX. Screenshot required. Module # Available Needed Associated Pins (or * for any) GPIO ? ? ? ADC ? ? ? UART ? ? ? SPI ? ? ? I2C ? ? ? PWM ? ? ? ICSP ? 1 ? ... ... ... ...","title":"PIC Table"},{"location":"second-page/","text":"Things to discuss","title":"Second Page"},{"location":"component-selection-example/","text":"Examples Style 1 This is the example found in the assignment, uses more html Table 1: Example component selection External Clock Module Solution Pros Cons Option 1. XC1259TR-ND surface mount crystal $1/each link to product * Inexpensive[^1] * Compatible with PSoC * Meets surface mount constraint of project * Requires external components and support circuitry for interface * Needs special PCB layout. * Option 2. * CTX936TR-ND surface mount oscillator * $1/each * Link to product * Outputs a square wave * Stable over operating temperature * Direct interface with PSoC (no external circuitry required) range * More expensive * Slow shipping speed Choice: Option 2: CTX936TR-ND surface mount oscillator Rationale: A clock oscillator is easier to work with because it requires no external circuitry in order to interface with the PSoC. This is particularly important because we are not sure of the electrical characteristics of the PCB, which could affect the oscillation of a crystal. While the shipping speed is slow, according to the website if we order this week it will arrive within 3 weeks. Style 2 Also acceptable, more markdown friendly External Clock Module XC1259TR-ND surface mount crystal $1/each link to product Pros Cons Inexpensive Requires external components and support circuitry for interface Compatible with PSoC Needs special PCB layout. Meets surface mount constraint of project CTX936TR-ND surface mount oscillator $1/each Link to product Pros Cons Outputs a square wave More expensive Stable over operating temperature Slow shipping speed Direct interface with PSoC (no external circuitry required) range Choice: Option 2: CTX936TR-ND surface mount oscillator Rationale: A clock oscillator is easier to work with because it requires no external circuitry in order to interface with the PSoC. This is particularly important because we are not sure of the electrical characteristics of the PCB, which could affect the oscillation of a crystal. While the shipping speed is slow, according to the website if we order this week it will arrive within 3 weeks.","title":"Component Selection Example"},{"location":"component-selection-example/#examples","text":"","title":"Examples"},{"location":"component-selection-example/#style-1","text":"This is the example found in the assignment, uses more html Table 1: Example component selection External Clock Module Solution Pros Cons Option 1. XC1259TR-ND surface mount crystal $1/each link to product * Inexpensive[^1] * Compatible with PSoC * Meets surface mount constraint of project * Requires external components and support circuitry for interface * Needs special PCB layout. * Option 2. * CTX936TR-ND surface mount oscillator * $1/each * Link to product * Outputs a square wave * Stable over operating temperature * Direct interface with PSoC (no external circuitry required) range * More expensive * Slow shipping speed Choice: Option 2: CTX936TR-ND surface mount oscillator Rationale: A clock oscillator is easier to work with because it requires no external circuitry in order to interface with the PSoC. This is particularly important because we are not sure of the electrical characteristics of the PCB, which could affect the oscillation of a crystal. While the shipping speed is slow, according to the website if we order this week it will arrive within 3 weeks.","title":"Style 1"},{"location":"component-selection-example/#style-2","text":"Also acceptable, more markdown friendly External Clock Module XC1259TR-ND surface mount crystal $1/each link to product Pros Cons Inexpensive Requires external components and support circuitry for interface Compatible with PSoC Needs special PCB layout. Meets surface mount constraint of project CTX936TR-ND surface mount oscillator $1/each Link to product Pros Cons Outputs a square wave More expensive Stable over operating temperature Slow shipping speed Direct interface with PSoC (no external circuitry required) range Choice: Option 2: CTX936TR-ND surface mount oscillator Rationale: A clock oscillator is easier to work with because it requires no external circuitry in order to interface with the PSoC. This is particularly important because we are not sure of the electrical characteristics of the PCB, which could affect the oscillation of a crystal. While the shipping speed is slow, according to the website if we order this week it will arrive within 3 weeks.","title":"Style 2"},{"location":"static/node_modules/mathjax/","text":"MathJax Beautiful math in all browsers MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers. It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems. It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily. Simply include MathJax and some mathematics in a web page, and MathJax does the rest. Some of the main features of MathJax include: High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages Supported in most browsers with no plug-ins, extra fonts, or special setup for the reader Easy for authors, flexible for publishers, extensible for developers Supports math accessibility, cut-and-paste interoperability, and other advanced functionality Powerful API for integration with other web applications See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation. MathJax Components MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS. Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way. For usage instructions, see the MathJax documentation . Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server. There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly. What's in this Repository This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository ). These component files are the ones served by the CDNs that offer MathJax to the web. In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser. The components are stored in the es5 directory, and are in ES5 format for the widest possible compatibility. In the future, we may make an es6 directory containing ES6 versions of the components. Installation and Use Using MathJax components from a CDN on the web If you are loading MathJax from a CDN into a web page, there is no need to install anything. Simply use a script tag that loads MathJax from the CDN. E.g., < script id = \"MathJax-script\" async src = \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\" ></ script > See the MathJax documentation , the MathJax Web Demos , and the MathJax Component Repository for more information. Hosting your own copy of the MathJax Components If you want to host MathJax from your own server, you can do so by installing the mathjax package using npm and moving the es5 directory to an appropriate location on your server: npm install mathjax@3 mv node_modules/mathjax/es5 <path-to-server-location>/mathjax Note that we are still making updates to version 2, so include @3 when you install, since the latest chronological version may not be version 3. Alternatively, you can get the files via GitHub: git clone https://github.com/mathjax/MathJax.git mj-tmp mv mj-tmp/es5 <path-to-server-location>/mathjax rm -rf mj-tmp Then (in either case) you can use a script tag like the following: < script id = \"MathJax-script\" async src = \"<url-to-your-site>/mathjax/tex-chtml.js\" ></ script > where <url-to-your-site> is replaced by the URL to the location where you moved the MathJax files above. See the documentation for details. Using MathJax components in a node application To use MathJax components in a node application, install the mathjax package: npm install mathjax@3 (we are still making updates to version 2, so you should include @3 since the latest chronological version may not be version 3). Then require mathjax within your application: require ( 'mathjax' ). init ({ ... }). then (( MathJax ) => { ... }); where the first { ... } is a MathJax configuration, and the second { ... } is the code to run after MathJax has been loaded. E.g. require ( 'mathjax' ). init ({ loader : { load : [ 'input/tex' , 'output/svg' ]} }). then (( MathJax ) => { const svg = MathJax . tex2svg ( '\\\\frac{1}{x^2-1}' , { display : true }); console . log ( MathJax . startup . adaptor . outerHTML ( svg )); }). catch (( err ) => console . log ( err . message )); Note: this technique is for node-based application only, not for browser applications. This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's require() command to load external modules. This setup will not work properly in the browser, even if you webpack it or bundle it in other ways. See the documentation and the MathJax Node Repository for more details. Reducing the Size of the Components Directory Since the es5 directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the tex-chtml.js component, then you can remove the tex-mml-chtml.js , tex-svg.js , tex-mml-svg.js , tex-chtml-full.js , and tex-svg-full.js configurations, which will save considerable space. Indeed, you should be able to remove everything other than tex-chtml.js , and the input/tex/extensions , output/chtml/fonts/woff-v2 , adaptors , a11y , and sre directories. If you are using the results only on the web, you can remove adaptors as well. If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove a11y and sre as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there). If you are using SVG rather than CommonHTML output (e.g., tex-svg.js rather than tex-chtml.js ), you can remove the output/chtml/fonts/woff-v2 directory. If you are using MathML input rather than TeX (e.g., mml-chtml.js rather than tex-chtml.js ), then you can remove input/tex/extensions as well. The Component Files and Pull Requests The es5 directory is generated automatically from the contents of the MathJax source repository. You can rebuild the components using the command npm run make-es5 --silent Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the es5 directory. If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository . MathJax Community The main MathJax website is http://www.mathjax.org , and it includes announcements and other important information. A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub. Before reporting a bug, please check that it has not already been reported. Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax. MathJax Resources MathJax Documentation MathJax Components MathJax Source Code MathJax Web Examples MathJax Node Examples MathJax Bug Tracker MathJax Users' Group","title":"MathJax"},{"location":"static/node_modules/mathjax/#mathjax","text":"","title":"MathJax"},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","text":"MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers. It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems. It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily. Simply include MathJax and some mathematics in a web page, and MathJax does the rest. Some of the main features of MathJax include: High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages Supported in most browsers with no plug-ins, extra fonts, or special setup for the reader Easy for authors, flexible for publishers, extensible for developers Supports math accessibility, cut-and-paste interoperability, and other advanced functionality Powerful API for integration with other web applications See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.","title":"Beautiful math in all browsers"},{"location":"static/node_modules/mathjax/#mathjax-components","text":"MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS. Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way. For usage instructions, see the MathJax documentation . Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server. There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.","title":"MathJax Components"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","text":"This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository ). These component files are the ones served by the CDNs that offer MathJax to the web. In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser. The components are stored in the es5 directory, and are in ES5 format for the widest possible compatibility. In the future, we may make an es6 directory containing ES6 versions of the components.","title":"What's in this Repository"},{"location":"static/node_modules/mathjax/#installation-and-use","text":"","title":"Installation and Use"},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","text":"If you are loading MathJax from a CDN into a web page, there is no need to install anything. Simply use a script tag that loads MathJax from the CDN. E.g., < script id = \"MathJax-script\" async src = \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\" ></ script > See the MathJax documentation , the MathJax Web Demos , and the MathJax Component Repository for more information.","title":"Using MathJax components from a CDN on the web"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","text":"If you want to host MathJax from your own server, you can do so by installing the mathjax package using npm and moving the es5 directory to an appropriate location on your server: npm install mathjax@3 mv node_modules/mathjax/es5 <path-to-server-location>/mathjax Note that we are still making updates to version 2, so include @3 when you install, since the latest chronological version may not be version 3. Alternatively, you can get the files via GitHub: git clone https://github.com/mathjax/MathJax.git mj-tmp mv mj-tmp/es5 <path-to-server-location>/mathjax rm -rf mj-tmp Then (in either case) you can use a script tag like the following: < script id = \"MathJax-script\" async src = \"<url-to-your-site>/mathjax/tex-chtml.js\" ></ script > where <url-to-your-site> is replaced by the URL to the location where you moved the MathJax files above. See the documentation for details.","title":"Hosting your own copy of the MathJax Components"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","text":"To use MathJax components in a node application, install the mathjax package: npm install mathjax@3 (we are still making updates to version 2, so you should include @3 since the latest chronological version may not be version 3). Then require mathjax within your application: require ( 'mathjax' ). init ({ ... }). then (( MathJax ) => { ... }); where the first { ... } is a MathJax configuration, and the second { ... } is the code to run after MathJax has been loaded. E.g. require ( 'mathjax' ). init ({ loader : { load : [ 'input/tex' , 'output/svg' ]} }). then (( MathJax ) => { const svg = MathJax . tex2svg ( '\\\\frac{1}{x^2-1}' , { display : true }); console . log ( MathJax . startup . adaptor . outerHTML ( svg )); }). catch (( err ) => console . log ( err . message )); Note: this technique is for node-based application only, not for browser applications. This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's require() command to load external modules. This setup will not work properly in the browser, even if you webpack it or bundle it in other ways. See the documentation and the MathJax Node Repository for more details.","title":"Using MathJax components in a node application"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","text":"Since the es5 directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the tex-chtml.js component, then you can remove the tex-mml-chtml.js , tex-svg.js , tex-mml-svg.js , tex-chtml-full.js , and tex-svg-full.js configurations, which will save considerable space. Indeed, you should be able to remove everything other than tex-chtml.js , and the input/tex/extensions , output/chtml/fonts/woff-v2 , adaptors , a11y , and sre directories. If you are using the results only on the web, you can remove adaptors as well. If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove a11y and sre as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there). If you are using SVG rather than CommonHTML output (e.g., tex-svg.js rather than tex-chtml.js ), you can remove the output/chtml/fonts/woff-v2 directory. If you are using MathML input rather than TeX (e.g., mml-chtml.js rather than tex-chtml.js ), then you can remove input/tex/extensions as well.","title":"Reducing the Size of the Components Directory"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","text":"The es5 directory is generated automatically from the contents of the MathJax source repository. You can rebuild the components using the command npm run make-es5 --silent Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the es5 directory. If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository .","title":"The Component Files and Pull Requests"},{"location":"static/node_modules/mathjax/#mathjax-community","text":"The main MathJax website is http://www.mathjax.org , and it includes announcements and other important information. A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub. Before reporting a bug, please check that it has not already been reported. Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.","title":"MathJax Community"},{"location":"static/node_modules/mathjax/#mathjax-resources","text":"MathJax Documentation MathJax Components MathJax Source Code MathJax Web Examples MathJax Node Examples MathJax Bug Tracker MathJax Users' Group","title":"MathJax Resources"},{"location":"subfolder/","text":"Things to discuss","title":"This is the index to a subfolder"},{"location":"subfolder/another-subfile/","text":"Things to discuss","title":"This is a secondary sub page"}]}